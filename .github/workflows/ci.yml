name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-linux-gnu-as:
    name: Linux with GNU AS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== GCC Version ==="
        gcc --version
        echo "=== GNU AS Version ==="
        as --version
        
    - name: Configure CMake (GNU AS)
      run: |
        cmake -B build -DUSE_NASM=OFF -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release
        
    - name: Test example
      run: |
        cd build/example
        ./res_example
        
    - name: Verify output
      run: |
        output=$(cd build/example && ./res_example)
        if [ "$output" != "Hello, world!" ]; then
          echo "Expected 'Hello, world!' but got '$output'"
          exit 1
        fi
        echo "Test passed: Output matches expected result"

  test-linux-nasm:
    name: Linux with NASM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install build tools and NASM
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake nasm
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== GCC Version ==="
        gcc --version
        echo "=== NASM Version ==="
        nasm -v
        
    - name: Configure CMake (NASM)
      run: |
        cmake -B build -DUSE_NASM=ON -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release
        
    - name: Test example
      run: |
        cd build/example
        ./res_example
        
    - name: Verify output
      run: |
        output=$(cd build/example && ./res_example)
        if [ "$output" != "Hello, world!" ]; then
          echo "Expected 'Hello, world!' but got '$output'"
          exit 1
        fi
        echo "Test passed: Output matches expected result"

  test-windows-msvc-nasm:
    name: Windows (MSVC) with NASM
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Install NASM (official)
      run: |
        $url = "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip"
        $out = "$env:RUNNER_TEMP\nasm.zip"
        Invoke-WebRequest $url -OutFile $out
        Expand-Archive $out -DestinationPath "C:\nasm"
        $nasmDir = Get-ChildItem "C:\nasm" | Where-Object { $_.PSIsContainer } | Select-Object -First 1 -ExpandProperty FullName
        echo "Добавляю $nasmDir в PATH"
        echo "$nasmDir" | Out-File -FilePath $env:GITHUB_PATH -Append
        Get-ChildItem "$nasmDir"
      shell: pwsh

    - name: Show NASM version
      run: nasm.exe -v
      shell: pwsh
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== MSVC Version ==="
        cl /? 2>&1 | findstr "Microsoft"
        echo "=== NASM Version ==="
        nasm -v
        
    - name: Configure CMake (NASM)
      run: |
        cmake -B build -DUSE_NASM=ON -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release
        
    - name: Test example
      run: |
        cd build\example\Release
        .\res_example.exe
        
    - name: Verify output
      run: |
        cd build\example\Release
        $output = (.\res_example.exe | Out-String).Trim()
        if ($output -ne "Hello, world!") {
          Write-Host "Expected 'Hello, world!' but got '$output'"
          exit 1
        }
        Write-Host "Test passed: Output matches expected result"

  test-macos-nasm:
    name: macOS with NASM (x86_64 only)
    runs-on: macos-13  # Use Intel-based runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install NASM
      run: |
        brew install nasm
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== Clang Version ==="
        clang --version
        echo "=== NASM Version ==="
        nasm -v
        echo "=== Architecture ==="
        uname -m
        
    - name: Configure CMake (NASM)
      run: |
        cmake -B build -DUSE_NASM=ON -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release
        
    - name: Test example
      run: |
        cd build/example
        ./res_example
        
    - name: Verify output
      run: |
        output=$(cd build/example && ./res_example)
        if [ "$output" != "Hello, world!" ]; then
          echo "Expected 'Hello, world!' but got '$output'"
          exit 1
        fi
        echo "Test passed: Output matches expected result"

  test-macos-arm64-gas:
    name: macOS ARM64 with GNU AS
    runs-on: macos-latest  # ARM64 runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== Clang Version ==="
        clang --version
        echo "=== Architecture ==="
        uname -m
        
    - name: Configure CMake (Auto-detect - should use GNU AS on ARM64)
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release
        
    - name: Test example
      run: |
        cd build/example
        ./res_example
        
    - name: Verify output
      run: |
        output=$(cd build/example && ./res_example)
        if [ "$output" != "Hello, world!" ]; then
          echo "Expected 'Hello, world!' but got '$output'"
          exit 1
        fi
        echo "Test passed: Output matches expected result"
