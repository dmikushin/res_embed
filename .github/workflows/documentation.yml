name: Documentation Examples

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-readme-example:
    name: Test README Example
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake nasm
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== GCC Version ==="
        gcc --version
        echo "=== GNU AS Version ==="
        as --version
        echo "=== NASM Version ==="
        nasm -v
        
    - name: Test default example
      run: |
        cd example
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        cd build
        output=$(./res_example)
        expected="Hello, world!"
        if [ "$output" != "$expected" ]; then
          echo "Example output mismatch: expected '$expected', got '$output'"
          exit 1
        fi
        echo "✅ README example works correctly"
        
    - name: Test with GNU AS
      run: |
        cd example
        cmake -B build-gas -DUSE_NASM=OFF -DCMAKE_BUILD_TYPE=Release
        cmake --build build-gas --config Release
        cd build-gas
        output=$(./res_example)
        expected="Hello, world!"
        if [ "$output" != "$expected" ]; then
          echo "GNU AS example output mismatch: expected '$expected', got '$output'"
          exit 1
        fi
        echo "✅ GNU AS example works correctly"
        
    - name: Test with NASM
      run: |
        cd example
        cmake -B build-nasm -DUSE_NASM=ON -DCMAKE_BUILD_TYPE=Release
        cmake --build build-nasm --config Release
        cd build-nasm
        output=$(./res_example)
        expected="Hello, world!"
        if [ "$output" != "$expected" ]; then
          echo "NASM example output mismatch: expected '$expected', got '$output'"
          exit 1
        fi
        echo "✅ NASM example works correctly"

  verify-cmake-integration:
    name: Verify CMake Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Show versions
      run: |
        echo "=== CMake Version ==="
        cmake --version
        echo "=== GCC Version ==="
        gcc --version
        echo "=== GNU AS Version ==="
        as --version
        
    - name: Test as subdirectory
      run: |
        mkdir -p test_integration/res_embed
        cp -r . test_integration/res_embed/
        cd test_integration
        
        # Create a simple test project
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.17)
        project(integration_test LANGUAGES ASM C CXX)
        
        add_subdirectory(res_embed)
        
        add_executable(integration_test main.cpp)
        
        # Create a test resource
        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test.txt "Integration test resource")
        res_embed(TARGET integration_test NAME "test" PATH ${CMAKE_CURRENT_BINARY_DIR}/test.txt)
        EOF
        
        cat > main.cpp << 'EOF'
        #include "res_embed.h"
        #include <iostream>
        #include <cstring>
        
        int main() {
            const char* content = res::embed::get("test");
            if (strcmp(content, "Integration test resource") == 0) {
                std::cout << "Integration test passed!" << std::endl;
                return 0;
            } else {
                std::cerr << "Integration test failed!" << std::endl;
                return 1;
            }
        }
        EOF
        
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        cd build
        ./integration_test
