name: Resource Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-multiple-resources:
    name: Test Multiple Resources (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSVC (Windows only)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake nasm
        
    - name: Install NASM (official, Windows)
      if: runner.os == 'Windows'
      run: |
        $url = "https://www.nasm.us/pub/nasm/releasebuilds/2.16.03/win64/nasm-2.16.03-win64.zip"
        $out = "$env:RUNNER_TEMP\nasm.zip"
        Invoke-WebRequest $url -OutFile $out
        Expand-Archive $out -DestinationPath "C:\nasm"
        $nasmDir = Get-ChildItem "C:\nasm" | Where-Object { $_.PSIsContainer } | Select-Object -First 1 -ExpandProperty FullName
        echo "Добавляю $nasmDir в PATH"
        echo "$nasmDir" | Out-File -FilePath $env:GITHUB_PATH -Append
        Get-ChildItem "$nasmDir"
      shell: pwsh

    - name: Show NASM version (Windows)
      if: runner.os == 'Windows'
      run: nasm.exe -v
      shell: pwsh
        
    - name: Show versions
      run: |
        echo "=== System Information ==="
        echo "OS: ${{ matrix.os }}"
        echo ""
        echo "=== CMake Version ==="
        cmake --version
        echo ""
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "=== GCC Version ==="
          gcc --version
          echo ""
          echo "=== NASM Version ==="
          nasm -v
        elif [ "${{ runner.os }}" = "Windows" ]; then
          echo "=== MSVC Version ==="
          cl 2>&1 | findstr "Microsoft" || true
          echo ""
          echo "=== NASM Version ==="
          nasm -v
        fi
      shell: bash
        
        
    - name: Configure CMake
      run: |
        cd test
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cd test
        cmake --build build --config Release
        
    - name: Run test (Unix)
      if: runner.os != 'Windows'
      run: |
        cd test/build
        ./resource_test
        
    - name: Run test (Windows)
      if: runner.os == 'Windows'
      run: |
        cd test/build/Release
        ./resource_test.exe
